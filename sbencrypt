#!/usr/bin/python3
import binascii
import sys
import os

# hk709 - Harsh Kumawat

# seed function, take in password, return hash/seed value
def seedfunc(password: str):
        
        hash = 0    
        for char in password:
            hash = ord(char) + (hash << 6) + (hash << 16) - hash

        return hash

# returns 16 keystream values based on the seed
def lcg(seed):
    m = 256
    a = 1103515245
    c = 12345

    byteList = []

    for i in range(16):

        val = ((a*seed)+c) % m
        seed = val
        byteList.append(val)

    return byteList

# block shuffle based on the keystream
def shuffle(block, keystream):
    newblock = block

    for i in range(16):
        first = keystream[i] & 0xf
        second = (keystream[i] >> 4) & 0xf
        newblock[first],newblock[second] = newblock[second],newblock[first]

    return newblock

# if numbers of args is not 4, usage error
if (len(sys.argv) != 4): 

    print('Usage: ./sbencrypt password plaintext ciphertext')

else:

    # taking in arg values
    passw = sys.argv[1]
    plaintext = sys.argv[2]
    outname = sys.argv[3]

    # outputting to file based on provided name
    outputting = open(outname, "ab")
    outputting.truncate(0)

    # file exception check
    try:
        text = open(plaintext, "rb") 
    except:
        print("cannot open plaintext file for reading:",plaintext)
        sys.exit(1)

    if len(passw) == 0:
        print("warning: empty password")
        seedval = seedfunc(passw)

    # getting seed
    seedval = seedfunc(passw)
    print("using seed="+str(seedval)+" from password="+passw)

    # getting first keystream values
    stream = lcg(seedval)
    oldkeys = stream
    firstblock = True

    eofreached = False

    # while not end of file based on blocks
    while eofreached != True: 

        #reading in first 16 bytes of plaintext
        plain = [None] * 16

        for i in range(16):
            currByte = text.read(1)
            valTex = int.from_bytes(currByte,byteorder='little')
            plain[i] = (valTex)

        #end of file check
        eofCheck = plain.count(0)

        padNeeded = False

        #pad needed check
        if eofCheck != 0:
            padNeeded = True

        currIndex = text.tell()
        nextByte = text.read(1)
        fullPad = False

        #checking if full block pad needed
        if (nextByte == b'' and eofCheck == 0) or (nextByte == b'' and eofCheck == 16):
            eofreached = True
            fullPad = True
            padNeeded = True
        elif nextByte == b'':
            eofreached = True
            padNeeded = True
        else:
            text.seek(currIndex)

        # if file is empty, only pad
        if os.stat(plaintext).st_size == 0:
            plain = [16] * 16
            block = list(a^b for a,b in zip(stream,plain))
            nextkeys = lcg(oldkeys[15])       
            keyshuffle = shuffle(block, nextkeys)
            writing = list(a^b for a,b in zip(keyshuffle,nextkeys))
            for i in range(16):
                newbyte = str(hex(writing[i]))
                newbyte = newbyte[2:]
                if len(newbyte) == 1:
                    newbyte = '0'+newbyte
                outputting.write(binascii.unhexlify(newbyte))
            sys.exit(1)


        # pad checks 
        if padNeeded == False:
            block = list(a^b for a,b in zip(stream,plain))
            nextkeys = lcg(oldkeys[15])       
            keyshuffle = shuffle(block, nextkeys)

        else:

            if fullPad != True:

                for i in range(eofCheck):
                    plain[15-i] = eofCheck

            block = list(a^b for a,b in zip(stream,plain))
            nextkeys = lcg(oldkeys[15])       
            keyshuffle = shuffle(block, nextkeys)

            eofreached = True
        
        # doing xor with the shuffled block and recent keystream
        writing = list(a^b for a,b in zip(keyshuffle,nextkeys))
        stream = writing
        oldkeys = nextkeys

        # getting output byte values and writing to file
        for i in range(16):
            newbyte = str(hex(writing[i]))
            newbyte = newbyte[2:]
            if len(newbyte) == 1:
                newbyte = '0'+newbyte
            outputting.write(binascii.unhexlify(newbyte))

        # if file was not empty but needs a full pad block
        if fullPad == True:
            plain = [16] * 16
            block = list(a^b for a,b in zip(stream,plain))
            nextkeys = lcg(oldkeys[15])       
            keyshuffle = shuffle(block, nextkeys)
            writing = list(a^b for a,b in zip(keyshuffle,nextkeys))
            for i in range(16):
                newbyte = str(hex(writing[i]))
                newbyte = newbyte[2:]
                if len(newbyte) == 1:
                    newbyte = '0'+newbyte
                outputting.write(binascii.unhexlify(newbyte))